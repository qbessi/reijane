import {
  __publicField
} from "./chunk-JVWSFFO4.js";

// node_modules/lenis/dist/lenis.mjs
var __assign = function() {
  return __assign = Object.assign || function __assign2(t2) {
    for (var e2, i = 1, o = arguments.length; i < o; i++) for (var s in e2 = arguments[i]) Object.prototype.hasOwnProperty.call(e2, s) && (t2[s] = e2[s]);
    return t2;
  }, __assign.apply(this, arguments);
};
function clamp(t2, e2, i) {
  return Math.max(t2, Math.min(e2, i));
}
var Animate = class {
  advance(t2) {
    var _a;
    if (!this.isRunning) return;
    let e2 = false;
    if (this.lerp) this.value = function damp(t3, e3, i, o) {
      return function lerp(t4, e4, i2) {
        return (1 - i2) * t4 + i2 * e4;
      }(t3, e3, 1 - Math.exp(-i * o));
    }(this.value, this.to, 60 * this.lerp, t2), Math.round(this.value) === this.to && (this.value = this.to, e2 = true);
    else {
      this.currentTime += t2;
      const i = clamp(0, this.currentTime / this.duration, 1);
      e2 = i >= 1;
      const o = e2 ? 1 : this.easing(i);
      this.value = this.from + (this.to - this.from) * o;
    }
    e2 && this.stop(), (_a = this.onUpdate) == null ? void 0 : _a.call(this, this.value, e2);
  }
  stop() {
    this.isRunning = false;
  }
  fromTo(t2, e2, { lerp: i = 0.1, duration: o = 1, easing: s = (t3) => t3, onStart: n, onUpdate: r }) {
    this.from = this.value = t2, this.to = e2, this.lerp = i, this.duration = o, this.easing = s, this.currentTime = 0, this.isRunning = true, n == null ? void 0 : n(), this.onUpdate = r;
  }
};
var Dimensions = class {
  constructor({ wrapper: t2, content: e2, autoResize: i = true, debounce: o = 250 } = {}) {
    __publicField(this, "resize", () => {
      this.onWrapperResize(), this.onContentResize();
    });
    __publicField(this, "onWrapperResize", () => {
      this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);
    });
    __publicField(this, "onContentResize", () => {
      this.wrapper === window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth);
    });
    this.wrapper = t2, this.content = e2, i && (this.debouncedResize = /* @__PURE__ */ function debounce(t3, e3) {
      let i2;
      return function() {
        let o2 = arguments, s = this;
        clearTimeout(i2), i2 = setTimeout(function() {
          t3.apply(s, o2);
        }, e3);
      };
    }(this.resize, o), this.wrapper === window ? window.addEventListener("resize", this.debouncedResize, false) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize();
  }
  destroy() {
    var _a, _b;
    (_a = this.wrapperResizeObserver) == null ? void 0 : _a.disconnect(), (_b = this.contentResizeObserver) == null ? void 0 : _b.disconnect(), window.removeEventListener("resize", this.debouncedResize, false);
  }
  get limit() {
    return { x: this.scrollWidth - this.width, y: this.scrollHeight - this.height };
  }
};
var Emitter = class {
  constructor() {
    this.events = {};
  }
  emit(t2, ...e2) {
    let i = this.events[t2] || [];
    for (let t3 = 0, o = i.length; t3 < o; t3++) i[t3](...e2);
  }
  on(t2, e2) {
    var _a;
    return ((_a = this.events[t2]) == null ? void 0 : _a.push(e2)) || (this.events[t2] = [e2]), () => {
      var _a2;
      this.events[t2] = (_a2 = this.events[t2]) == null ? void 0 : _a2.filter((t3) => e2 !== t3);
    };
  }
  off(t2, e2) {
    var _a;
    this.events[t2] = (_a = this.events[t2]) == null ? void 0 : _a.filter((t3) => e2 !== t3);
  }
  destroy() {
    this.events = {};
  }
};
var t = 100 / 6;
var VirtualScroll = class {
  constructor(t2, { wheelMultiplier: e2 = 1, touchMultiplier: i = 1 }) {
    __publicField(this, "onTouchStart", (t2) => {
      const { clientX: e2, clientY: i } = t2.targetTouches ? t2.targetTouches[0] : t2;
      this.touchStart.x = e2, this.touchStart.y = i, this.lastDelta = { x: 0, y: 0 }, this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: t2 });
    });
    __publicField(this, "onTouchMove", (t2) => {
      const { clientX: e2, clientY: i } = t2.targetTouches ? t2.targetTouches[0] : t2, o = -(e2 - this.touchStart.x) * this.touchMultiplier, s = -(i - this.touchStart.y) * this.touchMultiplier;
      this.touchStart.x = e2, this.touchStart.y = i, this.lastDelta = { x: o, y: s }, this.emitter.emit("scroll", { deltaX: o, deltaY: s, event: t2 });
    });
    __publicField(this, "onTouchEnd", (t2) => {
      this.emitter.emit("scroll", { deltaX: this.lastDelta.x, deltaY: this.lastDelta.y, event: t2 });
    });
    __publicField(this, "onWheel", (e2) => {
      let { deltaX: i, deltaY: o, deltaMode: s } = e2;
      i *= 1 === s ? t : 2 === s ? this.windowWidth : 1, o *= 1 === s ? t : 2 === s ? this.windowHeight : 1, i *= this.wheelMultiplier, o *= this.wheelMultiplier, this.emitter.emit("scroll", { deltaX: i, deltaY: o, event: e2 });
    });
    __publicField(this, "onWindowResize", () => {
      this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight;
    });
    this.element = t2, this.wheelMultiplier = e2, this.touchMultiplier = i, this.touchStart = { x: null, y: null }, this.emitter = new Emitter(), window.addEventListener("resize", this.onWindowResize, false), this.onWindowResize(), this.element.addEventListener("wheel", this.onWheel, { passive: false }), this.element.addEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.addEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.addEventListener("touchend", this.onTouchEnd, { passive: false });
  }
  on(t2, e2) {
    return this.emitter.on(t2, e2);
  }
  destroy() {
    this.emitter.destroy(), window.removeEventListener("resize", this.onWindowResize, false), this.element.removeEventListener("wheel", this.onWheel, { passive: false }), this.element.removeEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.removeEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.removeEventListener("touchend", this.onTouchEnd, { passive: false });
  }
};
var e = function() {
  function Lenis(t2) {
    var e2 = void 0 === t2 ? {} : t2, i = e2.wrapper, o = void 0 === i ? window : i, s = e2.content, n = void 0 === s ? document.documentElement : s, r = e2.wheelEventsTarget, l = void 0 === r ? o : r, h = e2.eventsTarget, a = void 0 === h ? l : h, c = e2.smoothWheel, p = void 0 === c || c, u = e2.syncTouch, d = void 0 !== u && u, m = e2.syncTouchLerp, v = void 0 === m ? 0.075 : m, g = e2.touchInertiaMultiplier, f = void 0 === g ? 35 : g, S = e2.duration, w = e2.easing, y = void 0 === w ? function(t3) {
      return Math.min(1, 1.001 - Math.pow(2, -10 * t3));
    } : w, b = e2.lerp, L = void 0 === b ? !S && 0.1 : b, _ = e2.infinite, z = void 0 !== _ && _, E = e2.orientation, T = void 0 === E ? "vertical" : E, M = e2.gestureOrientation, R = void 0 === M ? "vertical" : M, O = e2.touchMultiplier, W = void 0 === O ? 1 : O, x = e2.wheelMultiplier, H = void 0 === x ? 1 : x, N = e2.autoResize, k = void 0 === N || N, C = e2.__experimental__naiveDimensions, j = void 0 !== C && C, P = this;
    this.__isSmooth = false, this.__isScrolling = false, this.__isStopped = false, this.__isLocked = false, this.onVirtualScroll = function(t3) {
      var e3 = t3.deltaX, i2 = t3.deltaY, o2 = t3.event;
      if (!o2.ctrlKey) {
        var s2 = o2.type.includes("touch"), n2 = o2.type.includes("wheel");
        if (P.options.syncTouch && s2 && "touchstart" === o2.type && !P.isStopped && !P.isLocked) P.reset();
        else {
          var r2 = 0 === e3 && 0 === i2, l2 = "vertical" === P.options.gestureOrientation && 0 === i2 || "horizontal" === P.options.gestureOrientation && 0 === e3;
          if (!r2 && !l2) {
            var h2 = o2.composedPath();
            if (!(h2 = h2.slice(0, h2.indexOf(P.rootElement))).find(function(t4) {
              var e4, i3, o3, r3, l3;
              return (null === (e4 = t4.hasAttribute) || void 0 === e4 ? void 0 : e4.call(t4, "data-lenis-prevent")) || s2 && (null === (i3 = t4.hasAttribute) || void 0 === i3 ? void 0 : i3.call(t4, "data-lenis-prevent-touch")) || n2 && (null === (o3 = t4.hasAttribute) || void 0 === o3 ? void 0 : o3.call(t4, "data-lenis-prevent-wheel")) || (null === (r3 = t4.classList) || void 0 === r3 ? void 0 : r3.contains("lenis")) && !(null === (l3 = t4.classList) || void 0 === l3 ? void 0 : l3.contains("lenis-stopped"));
            })) if (P.isStopped || P.isLocked) o2.preventDefault();
            else {
              if (P.isSmooth = P.options.syncTouch && s2 || P.options.smoothWheel && n2, !P.isSmooth) return P.isScrolling = false, void P.animate.stop();
              o2.preventDefault();
              var a2 = i2;
              "both" === P.options.gestureOrientation ? a2 = Math.abs(i2) > Math.abs(e3) ? i2 : e3 : "horizontal" === P.options.gestureOrientation && (a2 = e3);
              var c2 = s2 && P.options.syncTouch, p2 = s2 && "touchend" === o2.type && Math.abs(a2) > 5;
              p2 && (a2 = P.velocity * P.options.touchInertiaMultiplier), P.scrollTo(P.targetScroll + a2, __assign({ programmatic: false }, c2 ? { lerp: p2 ? P.options.syncTouchLerp : 1 } : { lerp: P.options.lerp, duration: P.options.duration, easing: P.options.easing }));
            }
          }
        }
      }
    }, this.onNativeScroll = function() {
      if (!P.__preventNextScrollEvent && !P.isScrolling) {
        var t3 = P.animatedScroll;
        P.animatedScroll = P.targetScroll = P.actualScroll, P.velocity = 0, P.direction = Math.sign(P.animatedScroll - t3), P.emit();
      }
    }, window.lenisVersion = "1.0.45", o !== document.documentElement && o !== document.body || (o = window), this.options = { wrapper: o, content: n, wheelEventsTarget: l, eventsTarget: a, smoothWheel: p, syncTouch: d, syncTouchLerp: v, touchInertiaMultiplier: f, duration: S, easing: y, lerp: L, infinite: z, gestureOrientation: R, orientation: T, touchMultiplier: W, wheelMultiplier: H, autoResize: k, __experimental__naiveDimensions: j }, this.animate = new Animate(), this.emitter = new Emitter(), this.dimensions = new Dimensions({ wrapper: o, content: n, autoResize: k }), this.toggleClassName("lenis", true), this.velocity = 0, this.isLocked = false, this.isStopped = false, this.isSmooth = d || p, this.isScrolling = false, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, false), this.virtualScroll = new VirtualScroll(a, { touchMultiplier: W, wheelMultiplier: H }), this.virtualScroll.on("scroll", this.onVirtualScroll);
  }
  return Lenis.prototype.destroy = function() {
    this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, false), this.virtualScroll.destroy(), this.dimensions.destroy(), this.toggleClassName("lenis", false), this.toggleClassName("lenis-smooth", false), this.toggleClassName("lenis-scrolling", false), this.toggleClassName("lenis-stopped", false), this.toggleClassName("lenis-locked", false);
  }, Lenis.prototype.on = function(t2, e2) {
    return this.emitter.on(t2, e2);
  }, Lenis.prototype.off = function(t2, e2) {
    return this.emitter.off(t2, e2);
  }, Lenis.prototype.setScroll = function(t2) {
    this.isHorizontal ? this.rootElement.scrollLeft = t2 : this.rootElement.scrollTop = t2;
  }, Lenis.prototype.resize = function() {
    this.dimensions.resize();
  }, Lenis.prototype.emit = function() {
    this.emitter.emit("scroll", this);
  }, Lenis.prototype.reset = function() {
    this.isLocked = false, this.isScrolling = false, this.animatedScroll = this.targetScroll = this.actualScroll, this.velocity = 0, this.animate.stop();
  }, Lenis.prototype.start = function() {
    this.isStopped && (this.isStopped = false, this.reset());
  }, Lenis.prototype.stop = function() {
    this.isStopped || (this.isStopped = true, this.animate.stop(), this.reset());
  }, Lenis.prototype.raf = function(t2) {
    var e2 = t2 - (this.time || t2);
    this.time = t2, this.animate.advance(1e-3 * e2);
  }, Lenis.prototype.scrollTo = function(t2, e2) {
    var i = this, o = void 0 === e2 ? {} : e2, s = o.offset, n = void 0 === s ? 0 : s, r = o.immediate, l = void 0 !== r && r, h = o.lock, a = void 0 !== h && h, c = o.duration, p = void 0 === c ? this.options.duration : c, u = o.easing, d = void 0 === u ? this.options.easing : u, m = o.lerp, v = void 0 === m ? !p && this.options.lerp : m, g = o.onComplete, f = o.force, S = void 0 !== f && f, w = o.programmatic, y = void 0 === w || w;
    if (!this.isStopped && !this.isLocked || S) {
      if (["top", "left", "start"].includes(t2)) t2 = 0;
      else if (["bottom", "right", "end"].includes(t2)) t2 = this.limit;
      else {
        var b = void 0;
        if ("string" == typeof t2 ? b = document.querySelector(t2) : (null == t2 ? void 0 : t2.nodeType) && (b = t2), b) {
          if (this.options.wrapper !== window) {
            var L = this.options.wrapper.getBoundingClientRect();
            n -= this.isHorizontal ? L.left : L.top;
          }
          var _ = b.getBoundingClientRect();
          t2 = (this.isHorizontal ? _.left : _.top) + this.animatedScroll;
        }
      }
      if ("number" == typeof t2) {
        if (t2 += n, t2 = Math.round(t2), this.options.infinite ? y && (this.targetScroll = this.animatedScroll = this.scroll) : t2 = clamp(0, t2, this.limit), l) return this.animatedScroll = this.targetScroll = t2, this.setScroll(this.scroll), this.reset(), void (null == g || g(this));
        if (!y) {
          if (t2 === this.targetScroll) return;
          this.targetScroll = t2;
        }
        this.animate.fromTo(this.animatedScroll, t2, { duration: p, easing: d, lerp: v, onStart: function() {
          a && (i.isLocked = true), i.isScrolling = true;
        }, onUpdate: function(t3, e3) {
          i.isScrolling = true, i.velocity = t3 - i.animatedScroll, i.direction = Math.sign(i.velocity), i.animatedScroll = t3, i.setScroll(i.scroll), y && (i.targetScroll = t3), e3 || i.emit(), e3 && (i.reset(), i.emit(), null == g || g(i), i.__preventNextScrollEvent = true, requestAnimationFrame(function() {
            delete i.__preventNextScrollEvent;
          }));
        } });
      }
    }
  }, Object.defineProperty(Lenis.prototype, "rootElement", { get: function() {
    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "limit", { get: function() {
    return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "isHorizontal", { get: function() {
    return "horizontal" === this.options.orientation;
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "actualScroll", { get: function() {
    return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "scroll", { get: function() {
    return this.options.infinite ? function modulo(t2, e2) {
      return (t2 % e2 + e2) % e2;
    }(this.animatedScroll, this.limit) : this.animatedScroll;
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "progress", { get: function() {
    return 0 === this.limit ? 1 : this.scroll / this.limit;
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "isSmooth", { get: function() {
    return this.__isSmooth;
  }, set: function(t2) {
    this.__isSmooth !== t2 && (this.__isSmooth = t2, this.toggleClassName("lenis-smooth", t2));
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "isScrolling", { get: function() {
    return this.__isScrolling;
  }, set: function(t2) {
    this.__isScrolling !== t2 && (this.__isScrolling = t2, this.toggleClassName("lenis-scrolling", t2));
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "isStopped", { get: function() {
    return this.__isStopped;
  }, set: function(t2) {
    this.__isStopped !== t2 && (this.__isStopped = t2, this.toggleClassName("lenis-stopped", t2));
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "isLocked", { get: function() {
    return this.__isLocked;
  }, set: function(t2) {
    this.__isLocked !== t2 && (this.__isLocked = t2, this.toggleClassName("lenis-locked", t2));
  }, enumerable: false, configurable: true }), Object.defineProperty(Lenis.prototype, "className", { get: function() {
    var t2 = "lenis";
    return this.isStopped && (t2 += " lenis-stopped"), this.isLocked && (t2 += " lenis-locked"), this.isScrolling && (t2 += " lenis-scrolling"), this.isSmooth && (t2 += " lenis-smooth"), t2;
  }, enumerable: false, configurable: true }), Lenis.prototype.toggleClassName = function(t2, e2) {
    this.rootElement.classList.toggle(t2, e2), this.emitter.emit("className change", this);
  }, Lenis;
}();
export {
  e as default
};
//# sourceMappingURL=lenis.js.map
